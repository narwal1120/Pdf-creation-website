{"version":3,"sources":["App.js","index.js"],"names":["App","files","setFiles","useState","pdfBlob","setPdfBlob","isConverting","setIsConverting","onDrop","useCallback","acceptedFiles","rejectedFiles","some","file","type","alert","length","map","f","name","join","filteredFiles","filter","prev","id","crypto","randomUUID","preview","URL","createObjectURL","getRootProps","getInputProps","isDragActive","useDropzone","accept","image/jpeg","image/png","image/webp","image/gif","image/bmp","image/tiff","image/svg+xml","maxSize","useEffect","forEach","revokeObjectURL","React","createElement","className","Object","assign","DragDropContext","onDragEnd","result","destination","items","Array","from","reordered","splice","source","index","Droppable","droppableId","provided","droppableProps","ref","innerRef","Draggable","key","draggableId","draggableProps","dragHandleProps","src","alt","onClick","removeFile","placeholder","async","pdfDoc","PDFDocument","create","imgBytes","arrayBuffer","fileExtension","split","pop","toLowerCase","image","embedPng","includes","embedJpg","img","createImageBitmap","canvas","document","width","height","getContext","drawImage","pngBlob","Promise","resolve","toBlob","addPage","x","y","error","console","message","pdfBytes","save","newBlob","Blob","disabled","href","download","clearAllFiles","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.e558f6f0.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport { PDFDocument } from 'pdf-lib';\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n  const [files, setFiles] = useState([]);\r\n  const [pdfBlob, setPdfBlob] = useState(null);\r\n  const [isConverting, setIsConverting] = useState(false);\r\n\r\n  const onDrop = useCallback((acceptedFiles, rejectedFiles) => {\r\n    if (acceptedFiles.some(file => file.type === 'application/pdf')) {\r\n      alert('PDF files are not allowed.');\r\n    }\r\n    if (rejectedFiles.length > 0) {\r\n      alert(\r\n        `Rejected files: ${rejectedFiles\r\n          .map(f => f.file.name)\r\n          .join(', ')}\\nPlease upload valid image files.`\r\n      );\r\n    }\r\n\r\n    // Filter out PDF files explicitly.\r\n    const filteredFiles = acceptedFiles.filter(file => file.type !== 'application/pdf');\r\n\r\n    setFiles(prev => [\r\n      ...prev,\r\n      ...filteredFiles.map(file => ({\r\n        id: crypto.randomUUID(),\r\n        file,\r\n        preview: URL.createObjectURL(file),\r\n      })),\r\n    ]);\r\n  }, []);\r\n\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\r\n    onDrop,\r\n    accept: {\r\n      'image/jpeg': ['.jpeg', '.jpg'],\r\n      'image/png': ['.png'],\r\n      'image/webp': ['.webp'],\r\n      'image/gif': ['.gif'],\r\n      'image/bmp': ['.bmp'],\r\n      'image/tiff': ['.tiff', '.tif'],\r\n      'image/svg+xml': ['.svg']\r\n    },\r\n    maxSize: 50 * 1024 * 1024 // 50MB\r\n  });\r\n\r\n  const handleDragEnd = (result) => {\r\n    if (!result.destination) return;\r\n    const items = Array.from(files);\r\n    const [reordered] = items.splice(result.source.index, 1);\r\n    items.splice(result.destination.index, 0, reordered);\r\n    setFiles(items);\r\n  };\r\n\r\n  const generatePdf = async () => {\r\n    setIsConverting(true);\r\n    try {\r\n      const pdfDoc = await PDFDocument.create();\r\n\r\n      for (const { file } of files) {\r\n        try {\r\n          const imgBytes = await file.arrayBuffer();\r\n          const fileExtension = file.name.split('.').pop().toLowerCase();\r\n          let image;\r\n\r\n          if (file.type === 'image/png' || fileExtension === 'png') {\r\n            image = await pdfDoc.embedPng(imgBytes);\r\n          } else if (['image/jpeg', 'image/jpg'].includes(file.type) || ['jpeg', 'jpg'].includes(fileExtension)) {\r\n            image = await pdfDoc.embedJpg(imgBytes);\r\n          } else {\r\n            const img = await createImageBitmap(file);\r\n            const canvas = document.createElement('canvas');\r\n            canvas.width = img.width;\r\n            canvas.height = img.height;\r\n            const ctx = canvas.getContext('2d');\r\n            ctx.drawImage(img, 0, 0);\r\n            const pngBlob = await new Promise(resolve => canvas.toBlob(resolve, 'image/png'));\r\n            image = await pdfDoc.embedPng(await pngBlob.arrayBuffer());\r\n          }\r\n\r\n          const page = pdfDoc.addPage([image.width, image.height]);\r\n          page.drawImage(image, { x: 0, y: 0, width: image.width, height: image.height });\r\n        } catch (error) {\r\n          console.error(`Error processing ${file.name}:`, error);\r\n          alert(`Failed to process ${file.name}: ${error.message}`);\r\n        }\r\n      }\r\n\r\n      const pdfBytes = await pdfDoc.save();\r\n      const newBlob = new Blob([pdfBytes], { type: 'application/pdf' });\r\n\r\n      if (pdfBlob) URL.revokeObjectURL(pdfBlob);\r\n      setPdfBlob(newBlob);\r\n    } catch (error) {\r\n      console.error('PDF generation failed:', error);\r\n      alert('Failed to generate PDF. Please check the console for details.');\r\n    }\r\n    setIsConverting(false);\r\n  };\r\n\r\n  const removeFile = (id) => {\r\n    setFiles(prev => prev.filter(file => file.id !== id));\r\n  };\r\n\r\n  const clearAllFiles = () => {\r\n    setFiles([]);\r\n    setPdfBlob(null);\r\n  };\r\n\r\n  useEffect(() => {\r\n    return () => files.forEach(file => URL.revokeObjectURL(file.preview));\r\n  }, [files]);\r\n\r\n  return (\r\n    <div>\r\n      <nav className=\"menu-bar\">\r\n        <h2>PDF Converter</h2>\r\n      </nav>\r\n      \r\n      <div className=\"container\">\r\n        <h1 className=\"title\">Universal Image to PDF Converter</h1>\r\n\r\n        <div {...getRootProps()} className={`dropzone ${isDragActive ? 'dropzone-active' : ''}`}>\r\n          <input {...getInputProps()} />\r\n          <p className=\"dropzone-text\">\r\n            {isDragActive \r\n              ? 'Drop your image files here' \r\n              : 'Drag & drop images (JPEG, PNG, WEBP, GIF, BMP, TIFF, SVG), or click to select'}\r\n          </p>\r\n        </div>\r\n\r\n        <DragDropContext onDragEnd={handleDragEnd}>\r\n          <Droppable droppableId=\"files\">\r\n            {provided => (\r\n              <div {...provided.droppableProps} ref={provided.innerRef} className=\"image-grid\">\r\n                {files.map((file, index) => (\r\n                  <Draggable key={file.id} draggableId={file.id} index={index}>\r\n                    {provided => (\r\n                      <div \r\n                        className=\"image-box\"\r\n                        ref={provided.innerRef}\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                      >\r\n                        <img src={file.preview} alt=\"preview\" className=\"image-preview\" />\r\n                        <button className=\"delete-btn\" onClick={() => removeFile(file.id)}>×</button>\r\n                      </div>\r\n                    )}\r\n                  </Draggable>\r\n                ))}\r\n                {provided.placeholder}\r\n              </div>\r\n            )}\r\n          </Droppable>\r\n        </DragDropContext>\r\n\r\n        {files.length > 0 && (\r\n          <div className=\"button-container\">\r\n            <button onClick={generatePdf} disabled={isConverting} className=\"button convert-btn\">\r\n              {isConverting ? 'Converting...' : 'Convert to PDF'}\r\n            </button>\r\n\r\n            {pdfBlob && (\r\n              <a href={URL.createObjectURL(pdfBlob)} download=\"converted.pdf\" className=\"button download-btn\">\r\n                Download PDF\r\n              </a>\r\n            )}\r\n\r\n            <button onClick={clearAllFiles} className=\"button clear-btn\">\r\n              Clear All\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport App from './App';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n"],"sourceRoot":""}